{"is_source_file": true, "format": "dart", "description": "A mock implementation of the FirebaseService class designed for testing, which manages a list of Reservation objects and provides methods to manipulate and access them.", "external_files": ["package:reservation_management/models/reservation_model.dart", "package:reservation_management/services/firebase_service.dart"], "external_methods": ["Future<void> FirebaseService.addReservation(Reservation reservation)", "Future<void> FirebaseService.updateReservation(Reservation reservation)", "Future<void> FirebaseService.deleteReservation(String id)", "Stream<List<Reservation>> FirebaseService.getReservationsStream()", "Future<Reservation?> FirebaseService.getReservationById(String id)", "Stream<List<Reservation>> FirebaseService.getUserReservationsStream(String userId)", "Stream<List<Reservation>> FirebaseService.getUpcomingReservationsStream()", "Future<void> FirebaseService.syncReservations(List<Reservation> localReservations)"], "published": ["MockFirebaseService", "addReservation", "updateReservation", "deleteReservation", "getReservationsStream", "getReservationById", "getUserReservationsStream", "getUpcomingReservationsStream", "syncReservations", "clear", "addReservations", "dispose"], "classes": [{"name": "MockFirebaseService", "description": "A class that simulates the behavior of FirebaseService for the purpose of unit testing by managing reservations and providing mock implementations of its methods."}], "methods": [{"name": "addReservation", "description": "Adds a reservation to the list and streams the updated list."}, {"name": "updateReservation", "description": "Updates an existing reservation in the list or adds it if it does not exist, then streams the updated list."}, {"name": "deleteReservation", "description": "Removes a reservation from the list by its identifier and streams the updated list."}, {"name": "getReservationsStream", "description": "Returns a stream of the current reservations."}, {"name": "getReservationById", "description": "Retrieves a reservation by its identifier."}, {"name": "getUserReservationsStream", "description": "Returns a stream of reservations filtered by user ID."}, {"name": "getUpcomingReservationsStream", "description": "Returns a stream of reservations that are scheduled to occur in the future."}, {"name": "syncReservations", "description": "Synchronizes the internal list of reservations with a provided list."}, {"name": "clear", "description": "Clears all the reservations stored in the service."}, {"name": "addReservations", "description": "Adds multiple reservations at once to the internal list."}, {"name": "dispose", "description": "Releases all resources used by the stream controller."}], "calls": ["List<Reservation>.indexWhere", "StreamController.add", "List<Reservation>.firstWhere", "List<Reservation>.removeWhere"], "search-terms": ["MockFirebaseService", "firebase", "reservation", "testing", "stream"], "state": 2, "file_id": 72, "knowledge_revision": 204, "git_revision": "", "filename": "/home/kavia/workspace/reservation-app/reservation_management/test/mocks/mock_firebase_service.dart", "hash": "ff0d90a7fae834a9f67a5d5a540bf2ce", "format-version": 4, "code-base-name": "default", "revision_history": [{"204": ""}]}